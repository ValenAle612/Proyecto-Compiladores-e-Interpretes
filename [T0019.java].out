.CODE
PUSH simple_heap_init
CALL
PUSH Initmain
CALL
HALT

simple_heap_init:
RET 0

simple_malloc:
LOADFP ; Unit initialization
LOADSP
STOREFP ; Ends RA initialization
LOADHL ; hl
DUP ; hl
PUSH 1 ; 1
ADD ; hl + 1
STORE 4 ; Stores result (pointer to the base of the block)
LOAD 3 ; Loads the number of cells to allocate (parameter)
ADD
STOREHL ; Moves the heap limit (hl)
STOREFP
RET 1 ; Returns, removing the parameter

.DATA
VT_A: DW Am1
.CODE
Am1:
LOADFP
LOADSP
STOREFP
RMEM 1; Saving space for local variable b
PUSH 7 ; push integer
STORE 0
RMEM 1; Saving space for local variable c
PUSH 1 ; push integer
STORE -1
RMEM 1; Saving space for local variable t
PUSH 1 ; push true
STORE -2
case_label0:
LOAD 0
PUSH 1 ; push integer
EQ
BF case_label1
PUSH 1 ; push integer
LOAD 3
SWAP
STOREREF 1
RMEM 1 ; pointer to the String at .HEAP
PUSH 13
PUSH simple_malloc
CALL
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'a' 
STOREREF 0 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'c' 
STOREREF 1 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'a' 
STOREREF 2 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH ' ' 
STOREREF 3 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'n' 
STOREREF 4 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'o' 
STOREREF 5 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH ' ' 
STOREREF 6 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'e' 
STOREREF 7 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'n' 
STOREREF 8 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 't' 
STOREREF 9 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'r' 
STOREREF 10 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'o' 
STOREREF 11 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 0 ; push the terminator
STOREREF 12
PUSH SystemprintSlnString
CALL
FMEM 0 ; free space for local variables, 0 memory spaces were freed 
JUMP end_switch_label0
case_label1:
LOAD 0
PUSH 7 ; push integer
EQ
BF default_label
PUSH 14 ; push integer
LOAD 3
SWAP
STOREREF 1
FMEM 0 ; free space for local variables, 0 memory spaces were freed 
JUMP end_switch_label0
default_label:
PUSH 3 ; push integer
LOAD 3
SWAP
STOREREF 1
RMEM 1 ; pointer to the String at .HEAP
PUSH 12
PUSH simple_malloc
CALL
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'a' 
STOREREF 0 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'c' 
STOREREF 1 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'a' 
STOREREF 2 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH ' ' 
STOREREF 3 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 't' 
STOREREF 4 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'a' 
STOREREF 5 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'm' 
STOREREF 6 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'p' 
STOREREF 7 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'o' 
STOREREF 8 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'c' 
STOREREF 9 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'o' 
STOREREF 10 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 0 ; push the terminator
STOREREF 11
PUSH SystemprintSlnString
CALL
FMEM 0 ; free space for local variables, 0 memory spaces were freed 
JUMP end_switch_label0
end_switch_label0: NOP
FMEM 3 ; free space for local variables, 3 memory spaces were freed 
STOREFP
RET 1

.DATA
VT_B: DW Am1
.CODE
.DATA
VT_Init: NOP
.CODE
Initmain:
LOADFP
LOADSP
STOREFP
RMEM 1; Saving space for local variable b
RMEM 1
PUSH 2
PUSH simple_malloc
CALL
DUP
PUSH VT_B
STOREREF 0
STORE 0
LOAD 0 ; local variable b
DUP
LOADREF 0
LOADREF 0
CALL
LOAD 0 ; local variable b
LOADREF 1
PUSH ObjectdebugPrintint
CALL
FMEM 1 ; free space for local variables, 1 memory spaces were freed 
STOREFP
RET 0

.DATA
VT_Object: NOP
.CODE
ObjectdebugPrintint:
LOADFP
LOADSP
STOREFP
LOAD 3
IPRINT
STOREFP
RET 1 ; Returns deleting the parameter

.DATA
VT_String: NOP
.CODE
.DATA
VT_System: NOP
.CODE
SystemprintCchar:
LOADFP
LOADSP
STOREFP
LOAD 3
CPRINT
STOREFP
RET 1 ; Returns deleting the parameter

SystemprintSString:
LOADFP
LOADSP
STOREFP
LOAD 3
SPRINT
STOREFP
RET 1 ; Returns deleting the parameter

Systemprintln:
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 0 ; No parameters

SystemprintClnchar:
LOADFP
LOADSP
STOREFP
LOAD 3
CPRINT
PRNLN
STOREFP
RET 1 ; Returns deleting the parameter

SystemprintSlnString:
LOADFP
LOADSP
STOREFP
LOAD 3
SPRINT
PRNLN
STOREFP
RET 1 ; Returns deleting the parameter

Systemread:
LOADFP
LOADSP
STOREFP
READ   ; read the integer 
PUSH 48
SUB
STORE 3
STOREFP
RET 0 ; No parameters

SystemprintBboolean:
LOADFP
LOADSP
STOREFP
LOAD 3
BPRINT
STOREFP
RET 1 ; Returns deleting the parameter

SystemprintIlnint:
LOADFP
LOADSP
STOREFP
LOAD 3
IPRINT
PRNLN
STOREFP
RET 1 ; Returns deleting the parameter

SystemprintIint:
LOADFP
LOADSP
STOREFP
LOAD 3
IPRINT
STOREFP
RET 1 ; Returns deleting the parameter

SystemprintBlnboolean:
LOADFP
LOADSP
STOREFP
LOAD 3
BPRINT
PRNLN
STOREFP
RET 1 ; Returns deleting the parameter

