.CODE
PUSH simple_heap_init
CALL
PUSH Initmain
CALL
HALT

simple_heap_init:
RET 0

simple_malloc:
LOADFP ; Unit initialization
LOADSP
STOREFP ; Ends RA initialization
LOADHL ; hl
DUP ; hl
PUSH 1 ; 1
ADD ; hl + 1
STORE 4 ; Stores result (pointer to the base of the block)
LOAD 3 ; Loads the number of cells to allocate (parameter)
ADD
STOREHL ; Moves the heap limit (hl)
STOREFP
RET 1 ; Returns, removing the parameter

.DATA
VT_A: NOP
.CODE
.DATA
VT_Init: NOP
.CODE
Initmain:
LOADFP
LOADSP
STOREFP
PUSH 1 ; push integer
PUSH 2 ; push integer
GT
BF else_label0 ; jumps to the 'else', the condition is false
RMEM 1 ; pointer to the String at .HEAP
PUSH 5
PUSH simple_malloc
CALL
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 't' 
STOREREF 0 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'r' 
STOREREF 1 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'u' 
STOREREF 2 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'e' 
STOREREF 3 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 0 ; push the terminator
STOREREF 4
PUSH SystemprintSlnString
CALL
JUMP out_if_label0 ; skip the 'else'
else_label0:
RMEM 1 ; pointer to the String at .HEAP
PUSH 6
PUSH simple_malloc
CALL
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'f' 
STOREREF 0 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'a' 
STOREREF 1 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'l' 
STOREREF 2 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 's' 
STOREREF 3 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'e' 
STOREREF 4 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 0 ; push the terminator
STOREREF 5
PUSH SystemprintSlnString
CALL
out_if_label0: NOP
PUSH 1 ; push integer
PUSH 2 ; push integer
LE
BF else_label1 ; jumps to the 'else', the condition is false
RMEM 1 ; pointer to the String at .HEAP
PUSH 5
PUSH simple_malloc
CALL
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 't' 
STOREREF 0 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'r' 
STOREREF 1 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'u' 
STOREREF 2 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'e' 
STOREREF 3 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 0 ; push the terminator
STOREREF 4
PUSH SystemprintSlnString
CALL
JUMP out_if_label1 ; skip the 'else'
else_label1:
RMEM 1 ; pointer to the String at .HEAP
PUSH 6
PUSH simple_malloc
CALL
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'f' 
STOREREF 0 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'a' 
STOREREF 1 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'l' 
STOREREF 2 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 's' 
STOREREF 3 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'e' 
STOREREF 4 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 0 ; push the terminator
STOREREF 5
PUSH SystemprintSlnString
CALL
out_if_label1: NOP
PUSH 1 ; push true
BF out_if_label2 ; jumps out of the 'if', if the condition is false
RMEM 1 ; pointer to the String at .HEAP
PUSH 20
PUSH simple_malloc
CALL
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'S' 
STOREREF 0 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'o' 
STOREREF 1 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'l' 
STOREREF 2 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'o' 
STOREREF 3 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH ' ' 
STOREREF 4 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'p' 
STOREREF 5 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'u' 
STOREREF 6 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'e' 
STOREREF 7 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'd' 
STOREREF 8 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'e' 
STOREREF 9 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH ' ' 
STOREREF 10 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 's' 
STOREREF 11 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'e' 
STOREREF 12 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'r' 
STOREREF 13 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH ' ' 
STOREREF 14 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 't' 
STOREREF 15 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'r' 
STOREREF 16 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'u' 
STOREREF 17 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 'e' 
STOREREF 18 ; save the pushed letter
DUP ; duplicate the reference at the beggining of the String since STOREREF consumes it
PUSH 0 ; push the terminator
STOREREF 19
PUSH SystemprintSlnString
CALL
out_if_label2: NOP 
FMEM 0 ; free space for local variables, 0 memory spaces were freed 
STOREFP
RET 0

.DATA
VT_Object: NOP
.CODE
ObjectdebugPrintint:
LOADFP
LOADSP
STOREFP
LOAD 3
IPRINT
STOREFP
RET 1 ; Returns deleting the parameter

.DATA
VT_String: NOP
.CODE
.DATA
VT_System: NOP
.CODE
SystemprintCchar:
LOADFP
LOADSP
STOREFP
LOAD 3
CPRINT
STOREFP
RET 1 ; Returns deleting the parameter

SystemprintSString:
LOADFP
LOADSP
STOREFP
LOAD 3
SPRINT
STOREFP
RET 1 ; Returns deleting the parameter

Systemprintln:
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 0 ; No parameters

SystemprintClnchar:
LOADFP
LOADSP
STOREFP
LOAD 3
CPRINT
PRNLN
STOREFP
RET 1 ; Returns deleting the parameter

SystemprintSlnString:
LOADFP
LOADSP
STOREFP
LOAD 3
SPRINT
PRNLN
STOREFP
RET 1 ; Returns deleting the parameter

Systemread:
LOADFP
LOADSP
STOREFP
READ   ; read the integer 
PUSH 48
SUB
STORE 3
STOREFP
RET 0 ; No parameters

SystemprintBboolean:
LOADFP
LOADSP
STOREFP
LOAD 3
BPRINT
STOREFP
RET 1 ; Returns deleting the parameter

SystemprintIlnint:
LOADFP
LOADSP
STOREFP
LOAD 3
IPRINT
PRNLN
STOREFP
RET 1 ; Returns deleting the parameter

SystemprintIint:
LOADFP
LOADSP
STOREFP
LOAD 3
IPRINT
STOREFP
RET 1 ; Returns deleting the parameter

SystemprintBlnboolean:
LOADFP
LOADSP
STOREFP
LOAD 3
BPRINT
PRNLN
STOREFP
RET 1 ; Returns deleting the parameter

